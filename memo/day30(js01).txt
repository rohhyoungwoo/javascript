day30

복습 -> Jquery -> jdbc 수업 -> dbms(오라클 11g설치 삭제 후 21c 설치

0. 복습
1) 자바스크립트 쓰레드
	단일 쓰레드로 한번에 하나의 작업만 수행할 수 있다
	이벤트 루프를 활용하여 테스트가 종료되지 않아도 곧바로 실행할 수 있는 함수를 처리하는 방식을 도입했다

2) 동기와 비동기
	동기 : 모습일은 순차적으로 실행되며 어떤 작업이 수행중이라면 다음 작업은 대기한다
		(한 작업이 끝날때까지 다른 작업 대기)
		A작업 -> 완료후  -> B작업	
	비동기 : 작업이 완료되지 않아도 다른 작업 실행된다
		콜백, 프로미스, async/await 

3) 프로미스
	대기(pending), 이행(fulfilled), 거부(rejected)

4) async/await
	async 함수는 함수 선언핲에 async 키워드를 붙여서 정의한다
	항상 프로미스를 반환한다
	async 함수 내에서 await 키워드를 사용하여 다른 프로미스나 기본값을 기다릴 수 있다
	await 키워드는 async 함수 내에서만 사용할 수 있다

5) fetch
	비동기 네트워크 통신을 위한 기능이다
	HTTP 요청 보내고 응답을 받을 때 사용한다

	fetch는 url을 매개변수로 사용하여 요청을 보내고 프로미스를 반환한다

	프로미스 기반 : .then(), ,catch()를 사용하여 응답을 처리할 수 있다

1. JQuery
	자바스크립트의 라이브러리이다
	초창기의 Jquery는 크로스 브라우징을 지원해서 많은 인기를 얻었다
	지금은 표준화된 자바스크립트를 사용하므로 jquery의 필요성이 많이 떨어졌지만 자바스크립트의 DOM, Ajax 등을 사용 시 
	길고 복잡한 코드의 양을 줄여주어 편의성을 높이기 위해 주로 사용된다

1) jquery 사용하기
	네트워크 상으로 연결만 하면 간편하게 사용할 수 있다

	jquery > download > 스크롤 내리면 cnd > https://code.jauery.com 접속
	> 가장 최근 버전 uncompressed > 복사해서 html에 붙여넣고 사용

<script src="https://code.jquery.com/jquery-3.7.1.js" integrity="sha256-eKhayi8LEQwp4NKxN+CfCh+3qOVUtJn3QNZ0TciWLP4=" crossorigin="anonymous"></script>

	src : source의 약자, <script> 태그에 포함된 스크립트의 위치를 지정한다
		3.7.1 버전의 javascript 파일을 로드하는 URL이다
	integrity : 서브리소스 무결성(SRI, Subresource Integrity)을 위해 사용한다
		sha256 알고리즘을 사용하여 jQuery 3.7.1 파일의 콘텐츠를 해상한 값
		브라우저는 파일을 다운로드 한 후 이 해시값과 파일의 해시값을 비교하여 일치하지 않으면
		파일이 변조되었다고 간주하여 로드가 차단된다
	crossorigin  : 교차 출처 리소스를 요청할 때 CORS(Cross-Origin Resource Sharing) 설정
		일반적으로 고용 CDN에서 파일을 로드할 때 사용하는 설정이다

2. JQuery 문법
1) 기본 선택자
	$(`선택자`)
	jquery에서는 기본적으로 선택자를 이용하여 요소를 가져오며 css선택자와 동일하게 작성하면 된다
	jquery로 요소를 가져오면 자바스크립트 객체가 아니라 jquery 객체 타입이다
	jquery 객체를 저장하는 변수는 이름에 $를 붙여준다

2) 기타 선택자
	jqeury에서는 기본 선택자를 도와주는 여러가지 기타 선택자를 메소드 형태로 제공한다
	기본 선택자 뒤에 .을 사용하여 작성한다
	$(`선택자`).기타선택자()

	parent()	바로 위의 부모 요소를 선택한다
	parents()	상위 요소를 모두 선택한다(조상)
	children()	자식 요소를 모두 선택한다
	prev()		이전 형제요소를 선택한다
	prevAll()	이전 형제 요소 전체를 선택한다
	next()		다음 형제요소를 선택한다
	nextAll()	다음 형제요소 전체를 선택한다
	closest(`선택자`)	부모부터 조상까지 모두 탐색하여 해당 선택자와 일치하는 요소를 가져온다
	find(`선택자`) 	자식부터 자손까지 모두 탐색하여 해당 선택자와 일치하는 요소를 가져온다

3) 기본 선택자로 여러 요소를 선택했을 때 사용하는 기타 선택자
	first()		여러 요소 중 첫번째를 선택한다
	last()		여러 요소 중 마지막을 선택한다
	eq(index)	여러 요소 중 index번호를 사용하여 선택한다

4) 요소를 조작하는 메소드
   html(), html('수정내용')		innerHTML처럼 요소 내부의 HTML을 가져오거나 수정할 수 있다
   text(), text('수정내용')		innerText처럼 요소 내부의 text를 가져오거나 수정할 수 있다
   css('속성'), css('속성', '값')		해당 요소의 스타일 속성을 가져오거나 수정할 수 있다
   attr('속성'), attr('속성', '값')		해당 요소의 속성을 가져오거나 수정할 수 있다(정적속성)
   removeAttr('속성')			해당 요소의 속성을 삭제한다
   addClass('클래스명')			해당 요소에 특정 클래스를 추가한다
   removeClass('클래스명')			해당 요소의 특정 클래스를 삭제한다
   toggleClass('클래스명')			해당 요소에 특정 클래스가 존재하면 삭제시키고, 클래스가 존재하지 않으면 추가시킨다
   hasClass('클래스명')			해당 요소가 특정 클래스를 가지고 있으면 true 반환, 없으면 false 반환
   prop('프로퍼티명')			해당 요소의 프로퍼티를 가져오거나 수정한다(동적속성)
                                      	(jquery를 이용하여 자바스크립트 객체의 프로퍼티를 수정할 때 자주 사용)
   val(), val('값')			해당 요소의 value 값을 가져오거나 수정함\

5) 이벤트 등록 메소드
  	 모든 이벤트는 이벤트 이름과 동일한 메소드가 존재한다
  	 click(() => {})

  	 on을 사용할 수도 있다
  	 on('이벤트명', () => {})





















































+) 모듈, 패키지, 라이브러리
	모듈(Module)	패키지(package)		라이브 \(Library)
특징 	ES6부터 도입	패키지 관리도구 NPM, yarn	패키지 비교했을 때 범위가 좁을 수 있음
정의	독립적인 코드 파일	여러 모듈과 메타정보의 묶음	재사용 가능한 특정 기능의 코드 모음
사용목적 	코드 재사용성,	배포, 관리, 의존성 설정	기능 제공
	유지보수
예 	import,export를	package.json 파일이 있는	D3.js, Lodash, Momnet.js 등
	사용한 파일		프로젝트 구조      
                                    
+) java 모듈, 패키지, 라이브러리
	모듈		패키지			라이브러리
특징	java9부터 도입	클래스나 인터페이스를 묶음	.jar 파일 형태로 배포
			package 키워드로 선언
정의	패키지와 리소스를 	클래스와 인터페이스를 묶은	재사용 가능한 코두 집합(jar 형태)
	묶은 논리적 단위	디렉토리 구조
사용목적	의존성관리, 캡슐화	코드 조직화, 이름 충돌 방지	기능 제공
예	module-info.jar









































































































	













